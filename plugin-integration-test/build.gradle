/*
 * (c) Copyright 2023-2025 example-gradle-plugin Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * KineticFire Labs: https://labs.kineticfire.com/
 *     project site: https://github.com/kineticfire-labs/example-gradle-plugin/
 */

/*
 * Example Gradle Plugin Integration Test
 * 
 * Prerequisites: 
 *   1. Build the plugin first: cd ../plugin && ./gradlew build
 *   2. Plugin JAR must exist at: ../plugin/build/libs/example-gradle-plugin-<version>.jar
 * 
 * Usage:
 *   ./gradlew -PpluginVersion=1.0.0 build       # Build integration test app
 *   ./gradlew -PpluginVersion=1.0.0 run         # Run the example application
 *   ./gradlew -PpluginVersion=1.0.0 exampleTask # Run plugin's custom tasks
 */


buildscript {
    // Define tasks that require the plugin version
    def tasksRequiringPlugin = [
        'build', 'test', 'run', 'check', 'assemble',
        'compileJava', 'compileGroovy', 'processResources', 'classes', 'jar',
        'startScripts', 'distTar', 'distZip',
        'exampleTask', 'sampleTask'
    ]

    // Check if any requested tasks require the plugin
    def requestedTasks = gradle.startParameter.taskNames
    def requiresPlugin = !requestedTasks.isEmpty() && requestedTasks.any { taskName ->
        tasksRequiringPlugin.contains(taskName) || taskName.startsWith('compile') || taskName.startsWith('test')
    }

    // Only require plugin version for tasks that need it
    if (requiresPlugin) {
        assert project.hasProperty('pluginVersion') :
                "Missing -PpluginVersion. This task requires the plugin.\n" +
                "Example: ./gradlew -PpluginVersion=1.0.0 build\n" +
                "Tasks that don't require plugin version: tasks, help, clean, properties"

        def pluginVer   = project.property('pluginVersion').toString()

        def libsDirProp = project.findProperty('libsDir')?.toString()
        def libsDirPath = (libsDirProp ?: "${project.projectDir}/../plugin/build/libs").toString()
        def pluginJar   = "${libsDirPath}/example-gradle-plugin-${pluginVer}.jar".toString()

        assert project.file(pluginJar).exists() :
                "Missing plugin JAR at: ${project.file(pluginJar).absolutePath}\n" +
                        "Build the plugin first or pass -PlibsDir=..."

        dependencies {
            classpath files(pluginJar)
        }
    }

    // Store the requiresPlugin flag for use outside buildscript
    project.ext.requiresPlugin = requiresPlugin
}

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

// Apply the plugin under integration test (only when needed)
if (project.ext.requiresPlugin) {
    apply plugin: com.kineticfire.gradle.example_gradle_plugin.ExampleGradlePlugin
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation "org.apache.groovy:groovy:4.0.28"
    testImplementation "org.spockframework:spock-core:2.4-M6-groovy-4.0"
    testRuntimeOnly  "org.junit.platform:junit-platform-launcher:1.13.4"

    // This dependency is used by the application
    implementation "com.google.guava:guava:31.1-jre"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.kineticfire.gradle.example_gradle_plugin.example.howdy.HowdyWorld'
}

group = 'com.kineticfire.gradle.example_gradle_plugin.example.howdy'
version = 'SNAPSHOT'

jar {
    archiveBaseName = 'gradle-example-plugin-howdy-app'
    manifest {
        attributes 'Main-Class' : 'com.kineticfire.gradle.example_gradle_plugin.example.howdy.HowdyWorld'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
